#!/bin/bash

#
# Creator and Maintainer: AATHITH_RAJENDRAN
# Project: https://github.com/AATHITH/kubesort
# version: 0.4.0
#
#uncomment next line for debugging
# set -x

cmd=$4
option3=$4
[ -z "$cmd" ] && cmd="help";

pod () {
     declare -A arg
     arg[name]=".metadata.name"
     arg[status]=".status.phase"
     arg[restarts]=".status.containerStatuses[0].restartCount"
     arg[age]=".status.startTime"
     arg[ip]=".status.podIP"
     arg[node]=".spec.nodeName"
     option1="pod"
     option2=${arg[$cmd]}
}
deployment () {
     declare -A arg
     arg[name]=".metadata.name"
     arg[uptodate]=".status.updatedReplicas"
     arg[available]=".metadata.availableReplicas"
     arg[age]=".metadata.creationTimestamp"
     arg[containers]=".spec.template.spec.containers[*].name"
     arg[images]=".spec.template.spec.containers[*].image"
     option1="deployment"
     option2=${arg[$cmd]}
}
service () {
     declare -A arg
     arg[name]=".metadata.name"
     arg[type]=".spec.type"
     arg[clusterip]=".spec.clusterIP"
     arg[port]=".spec.ports[*].port"
     arg[age]=".metadata.creationTimestamp"
     option1="service"
     option2=${arg[$cmd]}
}
replicaset () {
     declare -A arg
     arg[name]=".metadata.name"
     arg[namespace]=".metadata.namespace"
     arg[desired]=".spec.replicas"
     arg[ready]=".status.readyReplicas"
     arg[available]=".status.availableReplicas"
     arg[age]="metadata.creationTimestamp"
     option1="replicaset"
     option2=${arg[$cmd]}
}
replicationcontroller() {
     declare -A arg
     arg[name]=".metadata.name"
     arg[namespace]=".metadata.namespace"
     arg[desired]=".spec.replicas"
     arg[ready]=".status.readyReplicas"
     arg[available]=".status.availableReplicas"
     arg[age]="metadata.creationTimestamp"
     option1="replicationcontroller"
     option2=${arg[$cmd]}
}
persistentvolume() {
     declare -A arg
     arg[name]=".metadata.name"
     arg[capacity]=".spec.capacity.storage"
     arg[accessmodes]=".spec.accessModes[*]"
     arg[reclaimpolicy]=".spec.persistentVolumeReclaimPolicy"
     arg[status]=".status.phase"
     arg[storageclass]=".spec.storageClassName"
     arg[reason]=".reason"
     arg[age]="metadata.creationTimestamp"
     option1="persistentvolume"
     option2=${arg[$cmd]}
}
persistentvolumeclaim() {
     declare -A arg
     arg[name]=".metadata.name"
     arg[namespace]=".metadata.namespace"
     arg[status]=".status.phase"
     arg[volume]=".spec.volumeName"
     arg[capacity]=".status.capacity.storage"
     arg[accessmodes]=".spec.accessModes[*]"
     arg[storageclass]=".spec.storageClassName"
     arg[age]="metadata.creationTimestamp"
     arg[volumemode]=".spec.volumeMode"
     option1="persistentvolumeclaim"
     option2=${arg[$cmd]}
}
node () {
     declare -A arg
     arg[name]=".metadata.name"
     arg[age]="metadata.creationTimestamp"
     arg[status]=""
     arg[version]=".status.nodeInfo.kubeletVersion"
     arg[internal-ip]=""
     arg[external-ip]=""
     arg[os-image]=".status.nodeInfo.osImage"
     arg[kernel-version]=".status.nodeInfo.kernelVersion"
     arg[container-runtime]=".status.nodeInfo.containerRuntimeVersion"
     option1="node"
     option2=${arg[$cmd]}
}
help () {
cat << EOF
   Missing something? need Help?
   kubesort kubectl get option1 option2 option3

   Available options are
        option1:
        (po|pod|pods), (deployments|deployment|deploy), (svc|service|services), (rs|replicaset), (rc|replicationcontroller), (pv|persistentvolume), (pvc|persistentvolumeclaim), (no|node|nodes)

                option2 for (po|pod|pods):
                name, status, restarts, age, ip, node

                option2 for (deployments|deployment|deploy):
                name, uptodate, available, age, containers, images

                option2 for (svc|service|services):
                name, type, clusterIP, externalIP, ports, age

                option2 for (rs|replicaset):
                namespace, name, desired, ready, available, age
                
                option2 for (rc|replicationcontroller|replicationcontroller):
                name, namespace, desired, ready, available, age
                
                option2 for (pv|persistentvolume|persistentvolumes):
                name, capacity, accessmodes, reclaimpolicy, status, claim, storageclass, reason, age, volumemode
                
                option2 for (pvc|persistentvolumeclaim|persistentvolumeclaims):
                name, status, volume, capacity, accessmodes, storageclass, age, volumemode
                
                option2 for (no|node|nodes):
                name, status, age, version, internal-ip, external-ip, os-image, kernel-version, container-runtime
                
                        option3: 'name of the namespace' or 'all'
EOF
exit
}

if [[ "$1" = "kubectl" && "$2" = "get" ]];
then
  case "$3" in
    pod|pods|po)
      pod
    ;;
    deploy|deployments|deployment)
      deployment
    ;;
    svc|service|services)
      service
    ;;
    rs|replicaset)
      replicaset
    ;;
    rc|replicationcontroller|replicationcontrollers)
      replicationController
    ;;
    pv|persistentvolume|persistentvolumes)
       persistentvolume
    ;;
    pvc|persistentvolumeclaim|persistentvolumeclaims)
       persistentvolumeclaim
    ;;
    no|node|nodes)
      node
    ;;
    *)
      help
    ;;
  esac

  case "$#" in
     4)
     option3=default
     kubectl get $option1 --sort-by=$option2 -n $option3 -o wide
     ;;
     5)
     if [ $5 = "all" ];
     then
        option3="--all-namespaces"
        kubectl get $option1 --sort-by=$option2 $option3 -o wide
     else
        option3=$5
        kubectl get $option1 --sort-by=$option2 -n $option3 -o wide
     fi
     ;;
     *)
     help
     ;;
  esac
else
  help
fi
